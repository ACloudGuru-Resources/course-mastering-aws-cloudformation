Transform: AWS::Serverless-2016-10-31

Parameters:
  DomainParameter:
    Type: String
    Description: Domain to be extended with subdomains
Resources:
  DefaultBucket:
    Type: AWS::S3::Bucket
  DefaultBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: DefaultBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal:
            AWS: !GetAtt OriginRequestRole.Arn
            CanonicalUser: !GetAtt CloudfrontOAI.S3CanonicalUserId
          Action:
            - s3:ListBucket
            - s3:GetObject
          Resource:
            - !Sub
              - arn:aws:s3:::${BucketName}
              - { BucketName: !Ref DefaultBucket }
            - !Sub
              - arn:aws:s3:::${BucketName}/*
              - { BucketName: !Ref DefaultBucket }
  ProxyEntryLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      Runtime: nodejs10.x
      CodeUri: src/proxyentry
      Handler: index.handler
      Role: !GetAtt ProxyEntryRole.Arn
      Environment:
        Variables:
          ORIGINMAP_TABLE: !Ref OriginMapTBL
          DOMAIN: !Ref DomainParameter
  ProxyEntryRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-proxyentry-rolespo
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-proxyentry-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - dynamodb:*
                Resource:
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/stack-proxy-*"
                  - !Sub "arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/stack-proxy-*/index/*"
  OriginRequestProxyLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-originrequestproxy
      Runtime: nodejs10.x
      CodeUri: src/originrequestproxy
      Handler: index.handler
      MemorySize: 512
      AutoPublishAlias: live
      Role: !GetAtt OriginRequestProxyRole.Arn
  OriginRequestProxyRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-originrequestproxy-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-originrequestproxy-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                Resource:
                  - !Sub
                    - arn:aws:s3:::${BucketName}
                    - { BucketName: !Ref DefaultBucket }
                  - !Sub
                    - arn:aws:s3:::${BucketName}/*
                    - { BucketName: !Ref DefaultBucket }
                  - arn:aws:s3:::*
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:DescribeStream
                  - dynamodb:GetRecords
                  - dynamodb:GetShardIterator
                  - dynamodb:ListStreams
                Resource:
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-*
                  - !Sub arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${AWS::StackName}-*/index/*
  OriginRequestLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-originrequest
      Runtime: nodejs10.x
      CodeUri: src/originrequest
      Handler: index.handler
      MemorySize: 512
      AutoPublishAlias: live
      Role: !GetAtt OriginRequestRole.Arn
  OriginRequestRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-originrequest-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-originrequest-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
  OriginResponseLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-originresponse
      Runtime: nodejs10.x
      CodeUri: src/originresponse
      Handler: index.handler
      MemorySize: 128
      AutoPublishAlias: live
      Role: !GetAtt OriginResponseRole.Arn
  OriginResponseRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-originresponse-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
                - edgelambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-originresponse-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - logs:DescribeLogStreams
                Resource: arn:aws:logs:*:*:*
  GithubWebhookLambdaFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-githubwebhook
      Runtime: nodejs10.x
      CodeUri: src/githubwebhook
      Handler: index.handler
      MemorySize: 256
      AutoPublishAlias: live
      Role: !GetAtt GithubWebhookRole.Arn
      Events:
        DeleteBranchHook:
          Type: Api
          Properties:
            Path: /deletebranch
            Method: post
      Environment:
        Variables:
          GITHUB_API: https://api.github.com/graphql
          GITHUB_WEBHOOK_SECRET: CwrzCiyFD23y3A2t
          GITHUB_ACCESS_TOKEN: 316d14af46c9d56822f2ded7b7007741a2a14f2d
          PROD_CI_ROLE_ARN: !GetAtt DeployerRole.Arn
  GithubWebhookRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-githubwebhookrole
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-githubwebhookrole
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DeleteStack
                Resource:
                  - arn:aws:cloudformation:*:*:stack/*-rc-*/*
                  - arn:aws:cloudformation:*:*:stack/*-feat-*/*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeAccountLimits
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackInstance
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackSet
                  - cloudformation:DescribeStackSetOperation
                  - cloudformation:EstimateTemplateCost
                  - cloudformation:GetStackPolicy
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                  - iam:PassRole
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:ListBucket
                  - s3:DeleteObject
                Resource:
                  - arn:aws:s3:::*-rc-*
                  - arn:aws:s3:::*-feat-*
  DeployerRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-deployer-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudformation.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-deployer-role
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "*"
                Resource: "*"
  OriginMapTBL:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${AWS::StackName}-domainmap
      AttributeDefinitions:
        - AttributeName: Host
          AttributeType: S
      KeySchema:
        - AttributeName: Host
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 10
        WriteCapacityUnits: 5
  CloudfrontOAI:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub Created for ${AWS::StackName}
  SSLCert:
    Type: AWS::CertificateManager::Certificate
    Properties:
      DomainName: !Sub
        - "*.${Domain}"
        - { Domain: !Ref DomainParameter }
  CDN:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Sub
            - "*.${Domain}"
            - { Domain: !Ref DomainParameter }
        ViewerCertificate:
          AcmCertificateArn: !Ref SSLCert
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2018
        Enabled: true
        HttpVersion: http2
        PriceClass: PriceClass_100
        IPV6Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - DELETE
            - GET
            - HEAD
            - OPTIONS
            - PATCH
            - POST
            - PUT
          CachedMethods:
            - GET
            - HEAD
          Compress: true
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: none
            Headers:
              - Host
              - CloudFront-Viewer-Country
              - Accept-Language
          DefaultTTL: 0
          MaxTTL: 0
          MinTTL: 0
          TargetOriginId: WebsiteBucketOrigin
          ViewerProtocolPolicy: redirect-to-https
          LambdaFunctionAssociations:
            - EventType: origin-request
              LambdaFunctionARN: !Ref OriginRequestProxyLambdaFunction.Version
            - EventType: origin-response
              LambdaFunctionARN: !Ref OriginResponseLambdaFunction.Version
        Origins:
          - DomainName: !GetAtt DefaultBucket.DomainName
            Id: WebsiteBucketOrigin
            S3OriginConfig:
              OriginAccessIdentity: !Sub
                - origin-access-identity/cloudfront/${OAI}
                - { OAI: !Ref CloudfrontOAI }
  DnsRecords:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub
        - "${Domain}."
        - { Domain: !Ref DomainParameter }
      Comment: !Sub DNS records associated with ${AWS::StackName}
      RecordSets:
        - Name: !Sub
            - "*.${Domain}."
            - { Domain: !Ref DomainParameter }
          Type: A
          AliasTarget:
            DNSName: !GetAtt CDN.DomainName
            HostedZoneId: Z2FDTNDATAQYW2

Outputs:
  ProxyEntryLambdaARN:
    Description: ProxyEntry Lambda ARN
    Value: !GetAtt ProxyEntryLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-proxyentry-lambda-arn
  OriginRequestLambdaARN:
    Description: OriginRequest Lambda ARN
    Value: !GetAtt OriginRequestLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-originrequest-lambda-arn
  OriginRequestRoleARN:
    Description: OriginRequest Role ARN
    Value: !GetAtt OriginRequestRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-originrequest-role-arn
  OriginRequestProxyRoleARN:
    Description: OriginRequestProxy Role ARN
    Value: !GetAtt OriginRequestProxyRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-originrequestproxy-role-arn
  OriginResponseLambdaARN:
    Description: OriginResponse Lambda ARN
    Value: !GetAtt OriginResponseLambdaFunction.Arn
    Export:
      Name: !Sub ${AWS::StackName}-originresponse-lambda-arn
  CloudfrontOAI:
    Description: Proxy CloudFront Origin Access Identity S3CanonicalUserId
    Value: !GetAtt CloudfrontOAI.S3CanonicalUserId
    Export:
      Name: !Sub ${AWS::StackName}-cloudfrontoai
