AWSTemplateFormatVersion: 2010-09-09
Description: Ghost Single Instance
Parameters:
  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.
  EnvironmentSize:
    Type: String
    Default: SMALL
    AllowedValues:
      - SMALL
      - MEDIUM
      - LARGE
    Description: Select Environment Size (S,M,L)
  DbAllocatedStorage:
    Default: "20"
    Description: RDS Allocated storage in GB. 20GB is free tier limit
    Type: String
  DbName:
    Default: ghost
    Description: The ghost database name
    Type: String
    MinLength: "1"
    MaxLength: "64"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbUser:
    NoEcho: "true"
    Description: The ghost database admin account username
    Type: String
    MinLength: "1"
    MaxLength: "16"
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  DbPassword:
    NoEcho: "true"
    Description: The ghost database admin account password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  DbRootPassword:
    NoEcho: "true"
    Description: MySQL root password
    Type: String
    MinLength: "8"
    MaxLength: "41"
    AllowedPattern: "[a-zA-Z0-9]*"
    ConstraintDescription: must contain only alphanumeric characters.
  WhitelistedIP:
    Description: IP to whitelist for access to Ghost Instance
    Type: String
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.
Mappings:
  InstanceSize:
    SMALL:
      EC2: t2.micro
      DB: db.t2.micro
    MEDIUM:
      EC2: t2.small
      DB: db.t2.micro
    LARGE:
      EC2: t2.medium
      DB: db.t2.medium
  RegionArch2AMI:
    ap-northeast-1:
      HVM64: ami-0f63c02167ca94956
    ap-northeast-2:
      HVM64: ami-069c1055fab7b32e5
    ap-northeast-3:
      HVM64: ami-084e4de48dc0834e8
    ap-south-1:
      HVM64: ami-092e1fd695ed0e93c
    ap-southeast-1:
      HVM64: ami-0393b4f16793f7f12
    ap-southeast-2:
      HVM64: ami-0deda1f8bbb52aac7
    ca-central-1:
      HVM64: ami-008c2d1a8ad81bc10
    eu-central-1:
      HVM64: ami-0cf8fa6a01bb07363
    eu-north-1:
      HVM64: ami-73d65f0d
    eu-west-1:
      HVM64: ami-0286372f78291e588
    eu-west-2:
      HVM64: ami-04b69fa254407c8ee
    eu-west-3:
      HVM64: ami-0e82c2554d8492095
    sa-east-1:
      HVM64: ami-05a01ab93a59b45de
    us-east-1:
      HVM64: ami-012fd5eb46f56731f
    us-east-2:
      HVM64: ami-06e2e609dbf389341
    us-west-1:
      HVM64: ami-0bf3d63a666665438
    us-west-2:
      HVM64: ami-082fd9a18128c9e8c
    cn-north-1:
      HVM64: ami-05596fb52c3802012
    cn-northwest-1:
      HVM64: ami-03f7db8b059795736
Resources:
  GhostServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable incoming requests + SSH access
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: !Ref WhitelistedIP

        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: !Ref WhitelistedIP

        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref WhitelistedIP
  DbSecurityByEC2SecurityGroup:
    Type: AWS::RDS::DBSecurityGroup
    Properties:
      GroupDescription: "Ingress for Amazon EC2 security group"
      DBSecurityGroupIngress:
        - EC2SecurityGroupName: !Ref GhostServerSecurityGroup
  GhostDbInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: !Ref DbName
      Engine: MySQL
      EngineVersion: "5.7"
      BackupRetentionPeriod: 7
      MultiAZ: false
      MasterUsername: root
      MasterUserPassword: !Ref DbRootPassword
      DBInstanceClass: !FindInMap [InstanceSize, !Ref EnvironmentSize, DB]
      AllocatedStorage: !Ref DbAllocatedStorage
      DBSecurityGroups:
        - !Ref DbSecurityByEC2SecurityGroup
  GhostServer:
    Type: AWS::EC2::Instance
    DependsOn:
      - GhostDbInstance
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT15M
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          full_install:
            - prepare_repositories
            - install_and_enable_cfn_hup
            - prep_ghost
            - extra_stuff
          updates_install:
            - prepare_repositories
            - install_and_enable_cfn_hup
            - extra_stuff
        prepare_repositories:
          files:
            /usr/local/bin/add_repository:
              content: |
                curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash
              mode: "000700"
              owner: root
              group: root
          commands:
            01_add_repository:
              command: /usr/local/bin/add_repository
        install_and_enable_cfn_hup:
          files:
            /etc/cfn/hooks.d/cfn-auto-reloader.conf:
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.GhostServer.Metadata.AWS::CloudFormation::Init
                action=/usr/local/bin/cfn-init --stack ${AWS::StackName} --resource GhostServer --configsets updates_install --region ${AWS::Region}
              mode: "000400"
              owner: root
              group: root
            /etc/cfn/cfn-hup.conf:
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
                verbose=true
                interval=5
              mode: "000400"
              owner: root
              group: root
          services:
            sysvinit:
              cfn-hup:
                enabled: "true"
                ensureRunning: "true"
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
        prep_ghost:
          packages:
            apt:
              nginx: []
              mysql-client: []
              nodejs: []
          files:
            /tmp/setup.mysql:
              content: !Sub |
                CREATE DATABASE IF NOT EXISTS ${DbName};
                CREATE USER IF NOT EXISTS '${DbUser}'@'%' IDENTIFIED BY '${DbPassword}';
                GRANT ALL ON ${DbName}.* TO '${DbUser}'@'%';
                FLUSH PRIVILEGES;
              mode: "000644"
              owner: root
              group: root
            /usr/local/bin/run_mysql_setup:
              content: !Sub |
                #!/bin/bash
                mysql --host=${GhostDbInstance.Endpoint.Address} --user=root --password=${DbRootPassword} < /tmp/setup.mysql > /dev/null 2>&1
              mode: "000700"
              owner: root
              group: root
            /usr/local/bin/prep_and_install_ghost:
              content: !Sub |
                !/bin/bash
                export GHOSTDIR=/var/www/ghost
                export PUBLICDNS=$(curl -s http://169.254.169.254/latest/meta-data/public-hostname)
                (id ghostuser > /dev/null 2>&1 && echo ghostuser exists...) || (useradd --user-group --create-home ghostuser && echo creating ghostuser...)
                ( [[ `groups ghostuser | awk '{print $4}'` == sudo ]] && echo ghostuser has sudo access...) || (usermod -aG sudo ghostuser && echo giving ghostuser sudo access...)
                ( [[ -f /etc/sudoers.d/ghostuser ]] && echo ghostuser can execute sudo w/o password) || (echo 'ghostuser ALL=(ALL:ALL) NOPASSWD: ALL' > /etc/sudoers.d/ghostuser && echo allowing ghostuser to execute sudo w/o password as required by cli...)
                (ghost version && echo ghost present...) || (sudo npm install ghost-cli@latest -g && echo ghost installed...)
                ( [[ -d $GHOSTDIR ]] && echo $GHOSTDIR directory exists...) || (sudo mkdir -p $GHOSTDIR && echo ghost app directory created)
                ( [[ `stat -c %U $GHOSTDIR` == ghostuser ]] && [[ `stat -c %G $GHOSTDIR` == ghostuser ]] && echo $GHOSTDIR ownership correct...) || (sudo chown ghostuser:ghostuser $GHOSTDIR && echo ghost ownership set...)
                ( [[ `stat -c %a $GHOSTDIR` == 775 ]] && echo $GHOSTDIR permissions correct...) || (sudo chmod 775 $GHOSTDIR && echo $GHOSTDIR permissions set...)
                if [[ -f $GHOSTDIR"/config.production.json" ]]; then
                echo ghost present...
                su - ghostuser -c "cd $GHOSTDIR && ghost config url http://$PUBLICDNS"
                su - ghostuser -c "cd $GHOSTDIR && ghost setup nginx"
                else
                echo ghost not present, installing...
                su - ghostuser -c "cd /var/www/ghost && ghost install --url http://$PUBLICDNS --ip 0.0.0.0 --dbhost ${GhostDbInstance.Endpoint.Address} --dbuser ${DbUser} --dbpass ${DbPassword} --dbname ${DbName} --process systemd --no-prompt --auto"
                fi
              mode: "000700"
              owner: root
              group: root
          commands:
            01setup_mysql:
              command: /usr/local/bin/run_mysql_setup
            02setup_ghost:
              command: /usr/local/bin/prep_and_install_ghost
            # 03cleanup:
            #   command: rm /usr/local/bin/run_mysql_setup /usr/local/bin/prep_and_install_ghost /usr/local/bin/add_repository
        extra_stuff:
          packages:
            apt:
              php: []
    Properties:
      ImageId: !FindInMap [RegionArch2AMI, !Ref "AWS::Region", HVM64]
      InstanceType: !FindInMap [InstanceSize, !Ref EnvironmentSize, EC2]
      SecurityGroupIds:
        - !Ref GhostServerSecurityGroup
      KeyName: !Ref KeyName
      UserData:
        "Fn::Base64": !Sub |
          #!/bin/bash -xe
          apt-get update -y
          DEBIAN_FRONTEND=noninteractive apt-get -y -o Dpkg::Options::='--force-confdef' -o Dpkg::Options::='--force-confold' upgrade
          apt-get install python-pip -y
          wget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz
          pip install aws-cfn-bootstrap-latest.tar.gz
          cp /usr/local/init/ubuntu/cfn-hup /etc/init.d/cfn-hup
          chmod +x /etc/init.d/cfn-hup
          update-rc.d cfn-hup defaults
          cfn-init --stack ${AWS::StackName} --resource GhostServer --configsets full_install --region ${AWS::Region}
          cfn-signal -e $? --stack ${AWS::StackName} --resource GhostServer --region ${AWS::Region}

Outputs:
  GhostUrl:
    Description: URL to reach the Ghost Front End
    Value: !Sub http://${GhostServer.PublicDnsName}
  GhostAdminUrl:
    Description: URL to reach the Ghost Admin Interface
    Value: !Sub http://${GhostServer.PublicDnsName}/ghost
  InstanceIPAddress:
    Description: IP Address to use to SSH to the Ghost instance
    Value: !GetAtt GhostServer.PublicIp
  RDSDBInstanceHostname:
    Description: Hostname of the Ghost Database
    Value: !GetAtt GhostDbInstance.Endpoint.Address
  RDSDBInstancePort:
    Description: Port of the Ghost Database
    Value: !GetAtt GhostDbInstance.Endpoint.Port
