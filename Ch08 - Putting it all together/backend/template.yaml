AWSTemplateFormatVersion: 2010-09-09
Transform: AWS::Serverless-2016-10-31

Globals:
  Function:
    Runtime: nodejs12.x
    Timeout: 10
    Handler: index.handler

Parameters:
  GitHubUser:
    Type: String
  APIKeyExpires:
    Type: Number

Resources:
  # RESOLVER FUNCTIONS
  LambdaCFN:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/cfn
      Role: !GetAtt RoleLambdaCFN.Arn
  LambdaGithub:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/github
      Role: !GetAtt RoleLambdaSSM.Arn
      Environment:
        Variables:
          SSMSECRETS: !FindInMap [Settings, prod, SSMParamName]
          GITHUB_USER: !Ref GitHubUser

  # ROLES
  RoleLambdaCFN:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-roleLambdaCFN
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-roleLambdaCFN
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - cloudformation:DescribeStacks
                  - cloudformation:DescribeAccountLimits
                  - cloudformation:DescribeChangeSet
                  - cloudformation:DescribeStackEvents
                  - cloudformation:DescribeStackInstance
                  - cloudformation:DescribeStackResource
                  - cloudformation:DescribeStackResources
                  - cloudformation:DescribeStackSet
                  - cloudformation:DescribeStackSetOperation
                  - cloudformation:EstimateTemplateCost
                  - cloudformation:GetStackPolicy
                  - cloudformation:GetTemplate
                  - cloudformation:GetTemplateSummary
                Resource: "*"
              - Effect: Allow
                Action:
                  - tag:GetResources
                Resource: "*"
  RoleLambdaSSM:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      RoleName: !Sub ${AWS::StackName}-roleLambdaSSM
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-roleLambdaSSM
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - ssm:GetParameter*
                Resource: !Sub
                  - arn:aws:ssm:${AWS::Region}:${AWS::AccountId}:parameter${SSMParamName}
                  - SSMParamName: !FindInMap [Settings, prod, SSMParamName]
  RoleAppSync:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: appsync.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: allow-access-to-lambda-from-appsync
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: lambda:invokeFunction
                Resource:
                  - !GetAtt LambdaCFN.Arn
                  - !Join ["", [!GetAtt LambdaCFN.Arn, ":*"]]
                  - !GetAtt LambdaGithub.Arn
                  - !Join ["", [!GetAtt LambdaGithub.Arn, ":*"]]

  # APPSYNC RESOURCES
  AppSyncAPI:
    Type: AWS::AppSync::GraphQLApi
    Properties:
      Name: !Sub ${AWS::StackName}
      AuthenticationType: API_KEY
  AppSyncSchema:
    Type: AWS::AppSync::GraphQLSchema
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Definition: |
        schema {
          query: Query
          mutation: Mutation
        }

        type Query {
          getStack(id:ID!): Stack
          allStacks: [Stack]

          getRepo(owner:String!, name:String!): Repository
          allRepos: [Repository]
        }

        type Mutation {
          createBranch(repository:String!, name:String!, sha:String!): RepoBranch
          deleteBranch(repository:String!, name:String!): RepoBranch
        }

        type Stack {
          stackId: String!
          stackName: String!
          description: String
          stackStatus: String!
          service: String
          siteUrl: String
          serviceEndpoint: String
          serviceEndpointWebsocket: String
          websiteBucket: String
          stage: String
          stageFlag: String
          creationTime: String
          lastUpdatedTime: String
          outputs: [StackOutput]
          repository: Repository
          tags: [StackTag]
        }
        type StackOutput {
          outputKey: String!
          outputValue: String!
          description: String
        }
        type StackTag {
          key: String!
          value: String!
        }

        type Repository {
          id: Int!
          owner: RepoOwner!
          name: String!
          commitUrl: String
          html_url: String!
          branches: [RepoBranch]!
          stacks: [Stack]!
        }
        type RepoOwner {
          login: String!
        }

        type RepoBranch {
          name: String!
          sha: String
          url: String
        }

  AppSyncAPIKey:
    Type: AWS::AppSync::ApiKey
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Expires: !Ref APIKeyExpires

  # DATASOURCES
  AppSyncDataSourceCFN:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: handlerCFN
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaCFN.Arn
      ServiceRoleArn: !GetAtt RoleAppSync.Arn
  AppSyncDataSourceGithub:
    Type: AWS::AppSync::DataSource
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      Name: handlerGithub
      Type: AWS_LAMBDA
      LambdaConfig:
        LambdaFunctionArn: !GetAtt LambdaGithub.Arn
      ServiceRoleArn: !GetAtt RoleAppSync.Arn

  # CFN RESOLVERS
  AppSyncResolverGetStack:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: getStack
      DataSourceName: !GetAtt AppSyncDataSourceCFN.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "getStack",
            "arguments":  $utils.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverAllStacks:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: allStacks
      DataSourceName: !GetAtt AppSyncDataSourceCFN.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "allStacks"
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverStackRepository:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Stack
      FieldName: repository
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "repository",
            "source":  $utils.toJson($context.source)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

  # GITHUB RESOLVERS
  AppSyncResolverRepositoryStacks:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Repository
      FieldName: stacks
      DataSourceName: !GetAtt AppSyncDataSourceCFN.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "BatchInvoke",
          "payload": {
            "field": "stacks",
            "source":  $utils.toJson($context.source)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverRepositoryBranches:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Repository
      FieldName: branches
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "branches",
            "source":  $utils.toJson($context.source)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverCreateBranch:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Mutation
      FieldName: createBranch
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "createBranch",
            "arguments":  $utils.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverDeleteBranch:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Mutation
      FieldName: deleteBranch
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "deleteBranch",
            "arguments":  $utils.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverGetRepo:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: getRepo
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "getRepo",
            "arguments":  $utils.toJson($context.arguments)
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)
  AppSyncResolverAllRepos:
    Type: AWS::AppSync::Resolver
    Properties:
      ApiId: !GetAtt AppSyncAPI.ApiId
      TypeName: Query
      FieldName: allRepos
      DataSourceName: !GetAtt AppSyncDataSourceGithub.Name
      RequestMappingTemplate: |
        {
          "version": "2017-02-28",
          "operation": "Invoke",
          "payload": {
            "field": "allRepos"
          }
        }
      ResponseMappingTemplate: $util.toJson($context.result)

Mappings:
  Settings:
    prod:
      SSMParamName: /acg/portal/secrets/prod

Outputs:
  APIKey:
    Description: API Key
    Value: !GetAtt AppSyncAPIKey.ApiKey

  GraphQL:
    Description: GraphQL URL
    Value: !GetAtt AppSyncAPI.GraphQLUrl
